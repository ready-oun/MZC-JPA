<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!-- Mapper XML에서 사용할 Alias 선언 
    EmployeeVO를 MyBatis 내에서 
   	조회 결과나 신규 데이터 입력 시에 사용할 객체로 쓰겠다 선언하는데
   	내가 사용할 이름을 지정한 것임 => alias = "employee"
   	
   	대상은 EmployeeVO 하고 MyBatis 내부에서 사용할 이름은 employee로 설정
    -->
    <typeAliases>
        <typeAlias alias="employee" type="com.rubypaper.persistence.mybatis.EmployeeVO" />
    </typeAliases>
    
    <!-- 데이터소스 설정 -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC" />
            <!-- Connection Pool : 기술면접에서 이거를 설명하라는 질문을 종종 함
           		MySQL client <-> DB server
           		접속 정보를 이용해서 로그인 => Session 성립 : DB 사용하기 위한 전처리
           		
           		미리 접속된 Connection을 생성해서 보관한 후,
           		요청을 받으면 Connection 하나를 반환함
           		따라서, 바로 연결된 것으로 사용하면 됨 == 접속을 위한 전처리가 필요 없음 
           		
           		default connection 개수 : 10개로 세팅     
           		
           		POOLED: DataSource에 풀링이 적용된 JDBC 커넥션을 위한 구현체이다. 
           		이는 새로운 Connection 인스턴스를 생성하기 위해 매번 초기화하는 것을 피하게 해준다. 
           		그래서 빠른 응답을 요구하는 웹 애플리케이션에서는 가장 흔히 사용되고 있다.
           		UNPOOLED DataSource에 비해 많은 프로퍼티를 설정할 수 있다.        		
             -->
            <dataSource type="POOLED">
                <property name="driver" value="org.h2.Driver" />
                <property name="url" value="jdbc:h2:tcp://localhost/./test" />
                <property name="username" value="sa" />
                <property name="password" value="sa" />                                                
            </dataSource>
        </environment>
    </environments>
    
    <!-- Mapper XML 등록 -->
    <mappers>
    	<!-- 서비스별로 관리하는 SQL 매퍼 -->
        <mapper resource="com/rubypaper/persistence/mybatis/s_emp-mapping.xml" />
    </mappers>
    
</configuration>