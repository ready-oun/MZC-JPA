1. JPA 
	1.1. 발전 흐름
		- JDBC ( Java DataBase Connectivity )
		  Java Code + SQL이 혼재 
		  
		  ex. EmployeeDAO.java 
		  
	  	- SQL Mapper
	  	  Java code 와 sql을 완전 분리
	  	  SQL 서비스별 관리가 가능 => 응집도 높아지니까 재사용성이 높아짐. SQL코드품질 향상, SQL 성능이 높아짐
	  	    대표적으로 MyBatis를 사용 
	  	  
	  	  MyBatis SQL 관리 파일 
	  	  	- 서비스를 위한 SQL 집합 
	  	  	  ex. p.53, s_emp-mapping.xml 
	  	  	  
	  	  	- 데이터베이스 접속과 관련한 설정 정보
	    	  alias 선언, 데이터소스(DB 정보) 설정, 매퍼 XML 등록 
	  	  	  ex. p.55, sql-map-config.xml     
	  	  
	  	- ORM ( 객체 관계 매퍼 ) 
	  	  SQL Mapper로 SQL을 분리해서 관리할 수 있지만,
	  	  그래도, SQL을 사용하면서 관리해야 하는 불편함
	  	  ( 순수 객체지향으로 DB 관련까지 개발하면 좋겠다... 
	  	  	=> SQL이 없어도 가능하지 않을까?
	  	  ) 
	  	  
	  	  JPA => Hibernate => Spring JPA
	  	  
	  	  Java <-> Hibernate <-> H2 Database
	  	  VO		SQL 생성  
	  	  
	  	 
Hibernate  
==================Hibernate 핵중요===================
하이버네이트에서 엔터티 관리 상태
- 분리 상태
- 관리(영속) 상태
- 비영속 상태
- 삭제된 상태

위 네 상태를 어떻게 구분하는가?
코드로 보면 이해가 간다

ex. 회원 관리 엔터티 기준으로 상태 구분
1. 비영속상태 
	Member member = new Member(1L, "홍길동"); <- 하이버네이트와 전혀 관계 없이 객체만 생성함 : """비영속 상태임"""
2. 관리상태
	em.persist(member); 우리 예제 코드는 session.persist(vo) 
3. 분리상태 
	em.detach(member);
4. 삭제상태
	em.remove(member);  
==================Hibernate 핵중요===================

JPQL ( Java Persistence Query Language)
- 기존 SQL과의 차이점
	SQL: 대상이 DB의 테이블 데이터 
	JPQL: 영속 컨테이너(하이버네이트)에서 관리되고 있는 엔터티가 대상 
	
- 비슷한 점 
	기존의 SQL 문법구조와 비슷함 

